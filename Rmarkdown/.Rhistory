#select(Date, NB_Accidents)
accidentsDF %>%
mutate(YYM=paste0(year(Date),'-',sprintf("%02d",month(Date)),'-01')) %>%
mutate(YYM = as.Date(YYM, format='%Y-%m-%d')) %>%
arrange(year(Date),month(Date)) %>%
group_by(YYM) %>%
summarise(count = sum(NB_Accidents)) -> ts.data
draw_ts <- function(ts.df, all.df){
ts.df %>%
ggplot(aes(YYM, count)) +
geom_vline(xintercept=as.numeric(ts.df$YYM[yday(ts.df$YYM)==1]), colour="grey60", alpha=.4) +
geom_line() +
scale_x_date(date_labels="%b", date_breaks="3 month", expand=c(0,0),
limits = as.Date(c('2012-01-01','2020-12-01'))) +
scale_y_continuous(labels = scales::comma, limits = c(0,3800),
breaks=scales::pretty_breaks(n=10))+
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),axis.line = element_line(colour = "black")) +
labs(x="", y="Number of accidents", title="Number of reported road accidents happenning in Montreal during 10 years span",
subtitle = "Data is aggregated by month and the x-axis is labelled for every 3 months") -> p
# Get the grob
g <- ggplotGrob(p)
# Get the y axis
index <- which(g$layout$name == "axis-b")  # Which grob
xaxis <- g$grobs[[index]]
# Get the ticks (labels and marks)
ticks <- xaxis$children[[2]]
# Get the labels
ticksB <- ticks$grobs[[2]]
# Edit x-axis label grob
# Find every index of Jun in the x-axis labels and add a newline and
# then a year label
junes = which(ticksB$children[[1]]$label == "Jul")
ticksB$children[[1]]$label[junes] = paste0(ticksB$children[[1]]$label[junes],
"\n      ", unique(year(all.df$YYM)))
# Make the edit
# Center the month labels between ticks
#ticksB$children[[1]]$label = paste0(paste(rep(" ",7),collapse=""), ticksB$children[[1]]$label)
# Find every index of Jun in the x-axis labels and a year label
junes = grep("Jun", ticksB$children[[1]]$label)
ticksB$children[[1]]$label[junes] = paste0(ticksB$children[[1]]$label[junes],
"\n      ", unique(year(all.df$YYM)))
# Put the edited labels back into the plot
ticks$grobs[[2]] <- ticksB
xaxis$children[[2]] <- ticks
g$grobs[[index]] <- xaxis
# Draw the plot
grid.newpage()
grid.draw(g)
}
ts.df = ts.data
draw_ts(ts.data,ts.data)
ts.data %>%
mutate(count = 0) %>%
draw_ts
ts.data %>%
mutate(count = 0) %>%
draw_ts(ts.data)
ts.data %>%
mutate(count = NA) %>%
draw_ts(ts.data)
draw_ts(ts.df[1,], ts.df)
draw_ts(ts.df[0,], ts.df)
draw_ts(ts.df[1;12,], ts.df)
draw_ts(ts.df[[1:12,]], ts.df)
draw_ts(ts.df[1:12,], ts.df)
draw_ts(ts.df[1:24,], ts.df)
draw_ts(ts.df[0,], ts.df)
draw_ts(ts.df[1:12,], ts.df)
draw_ts(ts.df[1:(12*4),])
draw_ts(ts.df[1:(12*4),], ts.df)
draw_ts(ts.df[1:(12*5),], ts.df)
draw_ts(ts.df[1:-12,], ts.df)
draw_ts(ts.df[1:(12*6),], ts.df)
draw_ts(ts.df[1:(12*8),], ts.df)
draw_ts <- function(ts.df, old.df, all.df){
ts.df %>%
ggplot(aes(YYM, count)) +
geom_vline(xintercept=as.numeric(ts.df$YYM[yday(ts.df$YYM)==1]), colour="grey60", alpha=.4) +
geom_line() +
scale_x_date(date_labels="%b", date_breaks="3 month", expand=c(0,0),
limits = as.Date(c('2012-01-01','2020-12-01'))) +
scale_y_continuous(labels = scales::comma, limits = c(0,3800),
breaks=scales::pretty_breaks(n=10))+
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),axis.line = element_line(colour = "black")) +
labs(x="", y="Number of accidents", title="Number of reported road accidents happenning in Montreal during 10 years span",
subtitle = "Data is aggregated by month and the x-axis is labelled for every 3 months") -> p
# Get the grob
g <- ggplotGrob(p)
# Get the y axis
index <- which(g$layout$name == "axis-b")  # Which grob
xaxis <- g$grobs[[index]]
# Get the ticks (labels and marks)
ticks <- xaxis$children[[2]]
# Get the labels
ticksB <- ticks$grobs[[2]]
# Edit x-axis label grob
# Find every index of Jun in the x-axis labels and add a newline and
# then a year label
junes = which(ticksB$children[[1]]$label == "Jul")
ticksB$children[[1]]$label[junes] = paste0(ticksB$children[[1]]$label[junes],
"\n      ", unique(year(all.df$YYM)))
# Make the edit
# Center the month labels between ticks
#ticksB$children[[1]]$label = paste0(paste(rep(" ",7),collapse=""), ticksB$children[[1]]$label)
# Find every index of Jun in the x-axis labels and a year label
junes = grep("Jun", ticksB$children[[1]]$label)
ticksB$children[[1]]$label[junes] = paste0(ticksB$children[[1]]$label[junes],
"\n      ", unique(year(all.df$YYM)))
# Put the edited labels back into the plot
ticks$grobs[[2]] <- ticksB
xaxis$children[[2]] <- ticks
g$grobs[[index]] <- xaxis
# Draw the plot
grid.newpage()
grid.draw(g)
}
draw_ts(ts.df[0,], ts.df[1:12,], ts.df)
draw_ts(ts.df[1:12,],ts.df[13:24,], ts.df)
draw_ts(ts.df[1:24,],ts.df[25:(12*8),], ts.df)
draw_ts(ts.df[1:12,],ts.df[13:24,], ts.df)
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
draw_ts(ts.data,ts.data, ts.data)
ts.df %>%
ggplot(aes(YYM, count)) +
geom_vline(xintercept=as.numeric(ts.df$YYM[yday(ts.df$YYM)==1]), colour="grey60", alpha=.4) +
geom_line(color='blue', size=2) +
scale_x_date(date_labels="%b", date_breaks="3 month", expand=c(0,0),
limits = as.Date(c('2012-01-01','2020-12-01'))) +
scale_y_continuous(labels = scales::comma, limits = c(0,3800),
breaks=scales::pretty_breaks(n=10))+
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),axis.line = element_line(colour = "black")) +
labs(x="", y="Number of accidents", title="Number of reported road accidents happenning in Montreal during 10 years span",
subtitle = "Data is aggregated by month and the x-axis is labelled for every 3 months") -> p
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
draw_ts(ts.df[0,],ts.df[0,], ts.df)
#draw_ts(ts.df[0,], ts.df[1:12,], ts.df)
draw_ts(ts.df[1:12,],ts.df[13:24,], ts.df)
#draw_ts(ts.df[0,], ts.df[1:12,], ts.df)
draw_ts(ts.df[1:13,],ts.df[13:24,], ts.df)
#draw_ts(ts.df[0,], ts.df[1:12,], ts.df)
draw_ts(ts.df[1:24,],ts.df[13:24,], ts.df)
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
ts.df %>%
ggplot(aes(YYM, count)) +
geom_vline(xintercept=as.numeric(ts.df$YYM[yday(ts.df$YYM)==1]), colour="grey60", alpha=.4) +
geom_line(color='blue', size=1, alpha=.3) +
scale_x_date(date_labels="%b", date_breaks="3 month", expand=c(0,0),
limits = as.Date(c('2012-01-01','2020-12-01'))) +
scale_y_continuous(labels = scales::comma, limits = c(0,3800),
breaks=scales::pretty_breaks(n=10))+
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),axis.line = element_line(colour = "black")) +
geom_line(data=new.seg,color='blue', size=1,alpha=.7) +
labs(x="", y="Number of accidents", title="Number of reported road accidents happenning in Montreal during 10 years span",
subtitle = "Data is aggregated by month and the x-axis is labelled for every 3 months") -> p
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
draw_ts(ts.df[1:(12*8),],ts.df[25:(12*8),], ts.df)
12*8
97+12
draw_ts(ts.df[1:(12*8),],ts.df[97:109,], ts.df)
draw_ts(ts.df[1:(12*8),],ts.df[97:108,], ts.df)
draw_ts(ts.df[1:108,],ts.df[97:108,], ts.df)
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
draw_ts(ts.data,ts.data, ts.data)
accidentsDF %>%
mutate(Year = year(Date)) %>%
select(Year, NB_MORTS, NB_BLESSES_GRAVES, NB_BLESSES_LEGERS) %>%
rename(nb_Dead = NB_MORTS, nb_lightly_injured = NB_BLESSES_LEGERS,
nb_severly_injured = NB_BLESSES_GRAVES) %>%
arrange((Year)) %>%
group_by(Year) %>%
summarise_all(sum) %>%
gather(key="Type", value = "Count", -Year) %>%
mutate(Type = factor(Type, levels=c('nb_severly_injured',
'nb_lightly_injured','nb_Dead'),
labels=c( 'Severe Injuries', "Light  Injuries",'Deaths'))) %>%
arrange(Type) %>%
group_by(Year)%>%
mutate( pos = cumsum(Count)-.5*Count) %>%
ungroup() %>%
group_by(Type) %>%
mutate(pct_change = round((Count/lag(Count) - 1 )*100 ,0) ) %>%
mutate(pct_color = case_when(
is.na(pct_change) ~ "black",
pct_change >= 0 ~ "red",
pct_change < 0 ~ "green",
TRUE ~ 'purple'
))%>%
ungroup() %>%
mutate(pct_change = ifelse(is.na(pct_change),
paste0('(',scales::comma(Count),')'),
case_when (
pct_change >= 0 ~ paste0('+', pct_change,'%'),
pct_change < 0 ~ paste0('-', abs(pct_change), '%')
))) %>%
mutate(pct = round(prop.table(Count),4),
hjust.p = c(rep(-.9,9),rep(0,9),rep(1.15,9))) %>%
ggplot(aes(x=as.factor(Year), y=Count, label=pct_change)) +
geom_bar(aes(fill=forcats::fct_rev(Type)),stat="identity") +
geom_text(aes(y=pos, hjust=hjust.p), stat='identity',color='white',
size=6)+
#position=position_stack()) +
scale_fill_manual(values=c("#fc3279", "#74cf8c",'#201f24'))+
scale_x_discrete(limits=rev)+
scale_y_continuous(expand = c(0, 0))+
coord_flip()+
theme(panel.background = element_blank(),
panel.grid.minor.x = element_blank(), panel.grid = element_blank(),
panel.border = element_blank(),axis.line.x = element_line(colour = "black"),
axis.text.y = element_text(size = 20),
axis.ticks.y = element_blank(),
legend.position='top',
legend.text = element_text(size=20),
legend.title = element_text(size=20),
title = element_text(size=20))+
guides(fill=guide_legend(title="Injury Type:")) +
labs(x="", y="Total Number of Injuries",
title="Changes in the total number of injuries caused by car accidents",
subtitle = "Data is aggregated by year and the first row contains the number of injuries per category for the first year")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
source("E:/Montreal-Asphalt-Detectives/Rmarkdown/presentation_graphs2.R")
knitr::opts_chunk$set(echo = FALSE, include=TRUE)
setwd("E:/Montreal-Asphalt-Detectives/Rmarkdown")
library(tidyverse)
library(ggpubr)
library(gridExtra) # Allows for multiple plots with grid arrangement
library(ggiraph) # Expand on ggplot library
library(ggiraphExtra) # Expand on ggplot library
library(waffle)
library(scales)
valueBox <- function(value, label, dim = c(4,6), colorPalette = "Dark2") {
# error msg when vectors have different sizes
if (length(value) != length(label)) stop("Number of labels is different to values")
# Converts vectors into dataframe to use on ggplot
df <- data.frame(value, label,
x = (rep(seq(2, 3*as.numeric(dim[2]), as.numeric(dim[2]) + 0.25), ceiling(length(value)/3)))[1:length(value)],
y = rep(seq(0, as.numeric(dim[1])*ceiling(length(value)/3)+0.5, as.numeric(dim[1])+0.25),each=3)[1:length(value)]) %>%
mutate(h = rep(as.numeric(dim[1]),nrow(.)),
w = rep(as.numeric(dim[2]),nrow(.)),
color = factor(1:nrow(.)))
# Uses ggplot to create boxes
ggplot(df, aes(x, y, height = h, width = w, label = label)) +
geom_tile(aes(fill = color)) +
geom_text(color = "white", fontface = "bold", size = 8,
aes(label = value, x = x - 0.3 , y = y + 0.3), hjust = 0) +
geom_text(color = "white", fontface = "bold", size = 3,
aes(label = label, x = x - 0.3 , y = y - 0.3), hjust = 0) +
coord_fixed() +
scale_fill_brewer(type = "qual",palette = colorPalette) +
theme_void() +
guides(fill = FALSE)
}
accidents <- read.csv('../data/collisions_routieres_road_accidents.csv',
header = TRUE)
accidents %>% ggplot(aes(x=factor(AN))) +
geom_bar() +
stat_count( geom="text", aes(label=..count..) ,vjust = -1)+
labs(title="Accidents Per Year", x="Year", y="Number of Accidents") ->an
accidents %>%
ggplot(aes(x=factor(JR_SEMN_ACCDN,
levels=c("LU","MA","ME","JE","VE","SA","DI"),
labels = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))) +
geom_bar() +
stat_count( geom="text", aes(label=..count..) ,vjust = -1)+
labs(title="Accidents Per Day", x="Day of Week", y="Number of Accidents") ->jr
accidents$HEURE_ACCDN %>%
lapply(function(x) gsub("Non précisé", NA, strsplit(x,':')[[1]][1])) %>%
as.numeric() -> accidents$HR_ACCDN
hr_labels = c("12AM", sprintf("%dAM", 1:11), "12PM", sprintf("%dPM", 1:11))
accidents %>%
drop_na(HR_ACCDN) %>%
ggplot(aes(x=factor(HR_ACCDN,
levels=seq(0,23,1),
labels= hr_labels))) +
geom_bar() +
scale_x_discrete(breaks=hr_labels[seq(1,25,3)])+
labs(title="Accidents Per Hour", x="Hour", y="Number of Accidents")  ->hr
ggarrange(an, jr, hr,
ncol = 2, nrow = 2)
accidents %>%
count(grav=factor(GRAVITE,
levels = c("Dommages matériels inférieurs au seuil de rapportage",
"Dommages matériels seulement", "Grave", "Léger", "Mortel"),
labels = c('Material dammages only <= $2k', 'Material dammages only > $2k',
'Severe injuries', 'Light injuries',
"Deadly"))) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x=reorder(grav,desc(pct)), y= n, label = scales::percent(pct))) +
#geom_bar() +
coord_flip() +
geom_col(position='dodge' ) +
theme(axis.text.y = element_text(face='bold', angle = 0, size=10),
panel.background = element_blank(),, axis.ticks.y = element_blank()) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = 0.5,
hjust = -1,
size = 6)  +
labs(title="The Severity of Accidents", y="Count", x="") +
scale_y_continuous(expand = expansion(add=c(0,20000)))
accidents %>%
select(NB_VICTIMES_TOTAL, NB_MORTS, NB_BLESSES_GRAVES, NB_BLESSES_LEGERS,
NB_VICTIMES_PIETON, NB_DECES_PIETON, NB_BLESSES_PIETON,
NB_VICTIMES_MOTO, NB_DECES_MOTO, NB_BLESSES_MOTO,
NB_VICTIMES_VELO, NB_DECES_VELO, NB_BLESSES_VELO) %>%
colSums() %>%
as.data.frame  %>%
rename( COUNT = ".") %>%
mutate(FEATURE = c("Total", "Deaths", "Injuries", "Injuries",
rep(c("Total", "Deaths", "Injuries"),3))) %>%
mutate(CATEGORY = c(replicate(4,"Total"),
replicate(3, "Pedestrians"),
replicate(3, "Motorcyclists"),
replicate(3, "Cyclists"))) %>%
filter( CATEGORY != 'Total') %>%
ggplot(aes(x=factor(FEATURE,
levels = c("Total","Deaths", "Severe",
"Light", "Injuries")),
y=COUNT, fill=CATEGORY)) +
geom_bar(stat = 'identity',position = 'stack')+
facet_wrap(. ~ factor(FEATURE,levels=c("Total", "Injuries", "Deaths")),
scales = "free",nrow = 1) +
geom_text(aes(label=comma(COUNT)), position=position_stack(vjust = .3))+
geom_text(aes(label=CATEGORY), position=position_stack(vjust = .7)) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title="Victims Breakdown", y="", x="")
accidents %>%
select(NB_VICTIMES_TOTAL, NB_MORTS, NB_BLESSES_GRAVES, NB_BLESSES_LEGERS,
NB_VICTIMES_PIETON, NB_DECES_PIETON, NB_BLESSES_PIETON,
NB_VICTIMES_MOTO, NB_DECES_MOTO, NB_BLESSES_MOTO,
NB_VICTIMES_VELO, NB_DECES_VELO, NB_BLESSES_VELO) %>%
colSums() %>%
as.data.frame  %>%
rename( COUNT = ".") %>%
mutate(FEATURE = c("Total", "Deaths", "Severe Injuries", "Light Injuries",
rep(c("Total", "Deaths", "Injuries"),3))) %>%
mutate(CATEGORY = c(replicate(4,"Total"),
replicate(3, "Pedestrians"),
replicate(3, "Motorcyclists"),
replicate(3, "Cyclists"))) %>%
filter( CATEGORY == 'Total' & FEATURE != 'Total') %>%
ggplot(aes(x=factor(FEATURE, levels = c("Light Injuries", "Severe Injuries",
"Deaths")),y=COUNT,fill=FEATURE))+
geom_bar(stat='identity') +
geom_text(aes(label=comma(COUNT)),
position=position_dodge(width=.2),vjust=-2) +
scale_y_continuous(expand = expansion(add=c(0,6000))) +
labs(title="Breakdown by Injury Type", x='', y='') +
theme(legend.position = 'none', panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(face='bold', size=10))
#--------------
accidents %>%
count(grav=factor(GRAVITE,
levels = c("Dommages matériels inférieurs au seuil de rapportage",
"Dommages matériels seulement", "Grave", "Léger", "Mortel"),
labels = c('Material dammages only <= $2k', 'Material dammages only > $2k',
'Severe injuries', 'Light injuries',
"Deadly"))) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x=reorder(grav,desc(pct)), y= n, label = scales::percent(pct))) +
#geom_bar() +
coord_flip() +
geom_col(position='dodge' ) +
theme(axis.text.y = element_text(face='bold', angle = 0, size=10),
panel.background = element_blank(),, axis.ticks.y = element_blank()) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = 0.5,
hjust = -1,
size = 6)  +
labs(title="The Severity of Accidents", y="Count", x="") +
scale_y_continuous(expand = expansion(add=c(0,20000)))
#--------------
accidents %>%
count(grav=factor(GRAVITE,
levels = c("Dommages matériels inférieurs au seuil de rapportage",
"Dommages matériels seulement", "Grave", "Léger", "Mortel"),
labels = c('Material dammages only <= $2k', 'Material dammages only > $2k',
'Severe injuries', 'Light injuries',
"Deadly"))) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x=reorder(grav,desc(pct)), y= n, label = scales::percent(pct))) +
#geom_bar() +
coord_flip() +
geom_col(position='dodge' ) +
theme(axis.text.y = element_text(face='bold', angle = 0, size=10),
panel.background = element_rect(fill = 'green', colour = 'red'),
axis.ticks.y = element_blank()) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = 0.5,
hjust = -1,
size = 6)  +
labs(title="The Severity of Accidents", y="Count", x="") +
scale_y_continuous(expand = expansion(add=c(0,20000)))
#--------------
accidents %>%
count(grav=factor(GRAVITE,
levels = c("Dommages matériels inférieurs au seuil de rapportage",
"Dommages matériels seulement", "Grave", "Léger", "Mortel"),
labels = c('Material dammages only <= $2k', 'Material dammages only > $2k',
'Severe injuries', 'Light injuries',
"Deadly"))) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x=reorder(grav,desc(pct)), y= n, label = scales::percent(pct))) +
#geom_bar() +
coord_flip() +
geom_col(position='dodge' ) +
theme(axis.text.y = element_text(face='bold', angle = 0, size=10),
panel.background = element_rect(fill = 'green'),
axis.ticks.y = element_blank()) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = 0.5,
hjust = -1,
size = 6)  +
labs(title="The Severity of Accidents", y="Count", x="") +
scale_y_continuous(expand = expansion(add=c(0,20000)))
#--------------
accidents %>%
count(grav=factor(GRAVITE,
levels = c("Dommages matériels inférieurs au seuil de rapportage",
"Dommages matériels seulement", "Grave", "Léger", "Mortel"),
labels = c('Material dammages only <= $2k', 'Material dammages only > $2k',
'Severe injuries', 'Light injuries',
"Deadly"))) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x=reorder(grav,desc(pct)), y= n, label = scales::percent(pct))) +
#geom_bar() +
coord_flip() +
geom_col(position='dodge' ) +
#theme(axis.text.y = element_text(face='bold', angle = 0, size=10),
#      panel.background = element_rect(fill = 'green'),
#      axis.ticks.y = element_blank()) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = 0.5,
hjust = -1,
size = 6)  +
labs(title="The Severity of Accidents", y="Count", x="") +
scale_y_continuous(expand = expansion(add=c(0,20000)))
accidentsDF %>%
mutate(Year = year(Date)) %>%
select(Year, NB_MORTS, NB_BLESSES_GRAVES, NB_BLESSES_LEGERS) %>%
rename(nb_Dead = NB_MORTS, nb_lightly_injured = NB_BLESSES_LEGERS,
nb_severly_injured = NB_BLESSES_GRAVES) %>%
arrange((Year)) %>%
group_by(Year) %>%
summarise_all(sum) %>%
gather(key="Type", value = "Count", -Year) %>%
mutate(Type = factor(Type, levels=c('nb_severly_injured',
'nb_lightly_injured','nb_Dead'),
labels=c( 'Severe Injuries', "Light  Injuries",'Deaths'))) %>%
arrange(Type) %>%
group_by(Year)%>%
mutate( pos = cumsum(Count)-.5*Count) %>%
ungroup() %>%
group_by(Type) %>%
mutate(pct_change = round((Count/lag(Count) - 1 )*100 ,0) ) %>%
mutate(pct_color = case_when(
is.na(pct_change) ~ "black",
pct_change >= 0 ~ "red",
pct_change < 0 ~ "green",
TRUE ~ 'purple'
))%>%
ungroup() %>%
mutate(pct_change = ifelse(is.na(pct_change),
paste0('(',scales::comma(Count),')'),
case_when (
pct_change >= 0 ~ paste0('+', pct_change,'%'),
pct_change < 0 ~ paste0('-', abs(pct_change), '%')
))) %>%
mutate(pct = round(prop.table(Count),4),
hjust.p = c(rep(-.9,9),rep(0,9),rep(1.15,9))) %>%
ggplot(aes(x=as.factor(Year), y=Count, label=pct_change)) +
geom_bar(aes(fill=forcats::fct_rev(Type)),stat="identity") +
geom_text(aes(y=pos, hjust=hjust.p), stat='identity',color='white',
size=6)+
#position=position_stack()) +
scale_fill_manual(values=c("#fc3279", "#74cf8c",'#201f24'))+
scale_x_discrete(limits=rev)+
scale_y_continuous(expand = c(0, 0))+
coord_flip()+
theme(panel.background = element_blank(),
panel.grid.minor.x = element_blank(), panel.grid = element_blank(),
panel.border = element_blank(),axis.line.x = element_line(colour = "black"),
axis.text.y = element_text(size = 20),
axis.ticks.y = element_blank(),
legend.position='top',
legend.text = element_text(size=20),
legend.title = element_text(size=20),
title = element_text(size=20))+
guides(fill=guide_legend(title="Injury Type:")) +
labs(x="", y="Total Number of Injuries",
title="Changes in the total number of injuries caused by car accidents",
subtitle = "Data is aggregated by year and the first row contains the number of injuries per category for the first year")

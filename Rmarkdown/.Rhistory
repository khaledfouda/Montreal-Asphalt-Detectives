# 5. Surface Condition
cbind(with(accidentsDF,model.matrix(~ Surface_Cond + 0))) %>%
select(-Surface_Cond, -`Surface_CondOther or Unknown`) %>%
# 6. Illumination
cbind(with(accidentsDF,model.matrix(~ Illumination + 0))) %>%
select(-Illumination, -`IlluminationUnknown`) %>%
# 7. Environment
cbind(with(accidentsDF,model.matrix(~ Environment + 0))) %>%
select(-Environment, -`EnvironmentOther or Unknown`) %>%
# 7. Weather
cbind(with(accidentsDF,model.matrix(~ Weather + 0))) %>%
select(-Weather, -`WeatherOther or Unknown`)
# for data per cluster / group by clusters then fill empty days
accidentsDF %>%
group_by(Date, cluster_id) %>%
summarise(NB_Accidents = n(), across(everything(), sum)) %>%
arrange(cluster_id, Date) %>%
group_by(cluster_id) %>%
do(pad(.,start_val = as.Date("2012-01-01"),end_val = as.Date("2020-12-31"),
interval = 'day')) %>%
filter(is.na(NB_Accidents)) %>% View
# for data per cluster / group by clusters then fill empty days
empty.days <- function(DF){
cluster_id = DF$cluster_id[1]
DF = pad(DF,start_val = as.Date("2012-01-01"),end_val = as.Date("2020-12-31"),
interval = 'day')
DF$cluster_id = cluster_id
return(DF)
}
accidentsDF %>%
group_by(Date, cluster_id) %>%
summarise(NB_Accidents = n(), across(everything(), sum)) %>%
arrange(cluster_id, Date) %>%
group_by(cluster_id) %>%
do(empty.days(.)) %>%
filter(is.na(NB_Accidents)) %>% View
accidentsDF %>%
group_by(Date, cluster_id) %>%
summarise(NB_Accidents = n(), across(everything(), sum)) %>%
arrange(cluster_id, Date) %>%
group_by(cluster_id) %>%
do(empty.days(.)) %>%
filter(is.na(NB_Accidents)) %>%
replace(is.na(.), 0) %>%
left_join(weatherDF, by='Date') %T>%
write.csv('../data/created/timeseries/ts_accidents_by_date_cluster.csv',
row.names = F) ->
accidentsDF.c
View(accidentsDF.c)
accidentsDF %>%
group_by(Date, cluster_id) %>%
summarise(NB_Accidents = n(), across(everything(), sum)) %>%
arrange(cluster_id, Date) %>%
group_by(cluster_id) %>%
do(empty.days(.)) %>%
replace(is.na(.), 0) %>%
left_join(weatherDF, by='Date') %T>%
write.csv('../data/created/timeseries/ts_accidents_by_date_cluster.csv',
row.names = F) ->
accidentsDF.c
accidentsDF.cluster <- read.csv('../data/created/timeseries/ts_accidents_by_date_cluster.csv',
header = TRUE) %>%
select(-starts_with('NB'), -starts_with('as.factor.Accident'),
NB_Accidents) %>%
mutate(Date = as.Date(Date))
accidentsDF.cluster %>%
group_by(cluster_id) %>%
select(-NB_Accidents) %T>%
group_walk(~ write.csv(.x,paste0('../data/created/timeseries/decomp/predictors_',
.y$cluster_id,'.csv'),row.names = F)) %>%
select(-Date) ->
predictors.cluster
accidentsDF.cluster %<>%
select(Date, NB_Accidents, cluster_id)
apply.mstl <- function(d){
d %>%
msts(start=c(2012,1), ts.frequency = 365.3333,
seasonal.periods = c(28,362:366) ) %>%
mstl(iterate = 5) %T>%
autoplot() %>%
as.data.frame()
}
results <- accidentsDF.cluster %>%
group_by(cluster_id) %>%
do(apply.mstl(.$NB_Accidents))
decomp=results
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(mean(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
'\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
results
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
'\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(mean(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
'\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(mean(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
# '\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(max(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
# '\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(min(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
# '\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
View(accidentsDF.cluster)
apply.mstl <- function(d){
d %>%
msts(start=c(2012,1), ts.frequency = 365.3333,
seasonal.periods = c(28,362:366) ) %>%
mstl(iterate = 100) %T>%
autoplot() %>%
as.data.frame()
}
results <- accidentsDF.cluster %>%
group_by(cluster_id) %>%
do(apply.mstl(.$NB_Accidents))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(min(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
# '\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(mean(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
# '\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(mean(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
"\t CV=", round(sd(decomp$Remainder)/mean(decomp$Remainder),3),
# '\tRange(R)=', round(range(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
return (data.frame(0))
}
results %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
# Transfer data into weekly
accidentsDF %<>%
select(-starts_with('cluster'),
-starts_with('NB'), -starts_with('as.factor.Accident'),
NB_Accidents) %>%
mutate(Date = as.Date(Date))
accidentsDF %>%
select(-NB_Accidents) %T>%
write.csv('../data/created/timeseries/decomp/predictors_all.csv',row.names = F) %>%
select(-Date) ->
predictors
accidentsDF %<>%
select(Date, NB_Accidents)
results <- accidentsDF$NB_Accidents %>%
msts(start=c(2012,1), ts.frequency = 365.3333,
seasonal.periods = c(28,362:366) ) %>%
mstl(iterate = 100) %T>%
autoplot()
# Transfer data into weekly
accidentsDF %<>%
select(-starts_with('cluster'),
-starts_with('NB'), -starts_with('as.factor.Accident'),
NB_Accidents) %>%
mutate(Date = as.Date(Date))
accidentsDF <- read.csv('../data/created/timeseries/ts_accidents_by_date.csv',
header = TRUE)
# Transfer data into weekly
accidentsDF %<>%
select(-starts_with('cluster'),
-starts_with('NB'), -starts_with('as.factor.Accident'),
NB_Accidents) %>%
mutate(Date = as.Date(Date))
accidentsDF %>%
select(-NB_Accidents) %T>%
write.csv('../data/created/timeseries/decomp/predictors_all.csv',row.names = F) %>%
select(-Date) ->
predictors
accidentsDF %<>%
select(Date, NB_Accidents)
results <- accidentsDF$NB_Accidents %>%
msts(start=c(2012,1), ts.frequency = 365.3333,
seasonal.periods = c(28,362:366) ) %>%
mstl(iterate = 100) %T>%
autoplot()
model.check(results)
model.check(as.data.frame(results))
results.clusters <- accidentsDF.cluster %>%
group_by(cluster_id) %>%
do(apply.mstl(.$NB_Accidents))
results.clusters %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
1 - (var(residuals.mstl)/var(accidentsDF$NB_Accidents))
results %>%
as.data.frame() %T>%
write.csv('../data/created/timeseries/decomp/decomp_all.csv',row.names = F) %>%
select(Remainder) %T>%
write.csv('../data/created/timeseries/decomp/residu_all.csv',row.names=F) ->
residuals.mstl
#---------------------------------------------
var(residuals.mstl)
mean(residuals.mstl)
1 - (var(residuals.mstl)/var(accidentsDF$NB_Accidents))
max(0, 1 - var(residuals.mstl)/(var(residuals.mstl+results[2,])))
results %>%
as.data.frame() %T>%
write.csv('../data/created/timeseries/decomp/decomp_all.csv',row.names = F) %>%
select(Remainder) %T>%
write.csv('../data/created/timeseries/decomp/residu_all.csv',row.names=F) %T>%
model.check()->
residuals.mstl
results %>%
as.data.frame() %T>%
model.check() %T>%
write.csv('../data/created/timeseries/decomp/decomp_all.csv',row.names = F) %>%
select(Remainder) %T>%
write.csv('../data/created/timeseries/decomp/residu_all.csv',row.names=F) ->
residuals.mstl
for (i in 3:8){
print(max(0, 1 - var(residuals.mstl)/(var(residuals.mstl+results[i,]))))
}
decomp=as.data.frame(results)
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
abS
avS
decomp[,1]
results[1,1]
results[1,2]
results[,2]
results[1,]
for (i in 3:8){
print(max(0, 1 - var(residuals.mstl)/(var(residuals.mstl+results[,i]))))
}
length(residuals.mstl)
residuals.mstl
residuals.mstl[1,]
residuals.mstl[,1]
residuals.mstl[1:3,]
residuals.mstl[,1]
for (i in 3:8){
print(max(0, 1 - var(residuals.mstl)/(var(residuals.mstl[,1]+results[,i]))))
}
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS
results.clusters %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
model.check <- function(decomp){
avS = c()
for (i in 4:9){
avS = c(avS,max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp[,i]))))
}
avS = round(mean(avS),3)
cat(paste0('\n-----------------------------------------------------------------',
"\nCluster number ", decomp$cluster_id[1],
"\nVar(R)=",round(var(decomp$Remainder),3),
"\tMean(R)=", round(mean(decomp$Remainder),3),
"\t CV=", round(sd(decomp$Remainder)/mean(decomp$Remainder),3),
'\nLjung p-value=',
round((Box.test(decomp$Remainder, lag=1, type='Ljung'))$p.value,3),
'\nVariability explained = ',
round(1 - (var(decomp$Remainder)/var(accidentsDF.cluster$NB_Accidents)),3),
'\nTrend importance: ',
round(max(0, 1 - var(decomp$Remainder)/(var(decomp$Remainder+decomp$Trend))),3),
'\t mean seasonality importance: ', avS,
'\n-----------------------------------------------------------------'
))
write.csv(decomp,
paste0('../data/created/timeseries/decomp/decomp_',
decomp$cluster_id[1],'.csv'),row.names = F)
write.csv(decomp$Remainder,
paste0('../data/created/timeseries/decomp/residu_',
decomp$cluster_id[1],'.csv'),row.names = F)
return (data.frame(0))
}
results.clusters %>%
as.data.frame %>%
arrange(cluster_id) %>%
group_by(cluster_id) %>%
do(model.check(.))
apply.mstl <- function(d){
d %<>%
msts(start=c(2012,1), ts.frequency = 365.3333,
seasonal.periods = c(28,362:366) ) %>%
mstl(iterate = 100)
autoplot(d)
return(as.data.frame(d))
}
results.clusters <- accidentsDF.cluster %>%
group_by(cluster_id) %>%
do(apply.mstl(.$NB_Accidents))
apply.mstl <- function(d){
d %<>%
msts(start=c(2012,1), ts.frequency = 365.3333,
seasonal.periods = c(28,362:366) ) %>%
mstl(iterate = 100)
plot(d)
return(as.data.frame(d))
}
results.clusters <- accidentsDF.cluster %>%
group_by(cluster_id) %>%
do(apply.mstl(.$NB_Accidents))
